1. Two Sum

Solution 1:
#include<unordered_map>
using namespace std;
class Solution {
public:
    vector<int> twoSum(vector<int>& nums, int target) {
        unordered_map<int,int> umap;
        vector<int> res;
        for(int i=0;i<nums.size();++i){
            int key = target - nums[i];
            if(umap.find(key)!=umap.end())
            {
                    res.push_back(umap[key]);
                    res.push_back(i);
            }
            umap[nums[i]] = i;
        }
        return res;
    }
};

Solution 2:
#include<unordered_map>
using namespace std;
class Solution {
public:
    vector<int> twoSum(vector<int>& nums, int target) {
        unordered_map<int,int> umap;
        for(int i=0;i<nums.size();++i){
            int key = target - nums[i];
            if(umap.find(key)!=umap.end())
            {
                    return {umap[key],i};
            }
            umap[nums[i]] = i;
        }
        return {};
    }
};